{"version":3,"sources":["Components/LanguageOptions.jsx","Components/DateOption.jsx","Components/DataTableRow.jsx","Components/DotLoader.jsx","Components/DataTable.jsx","App.js","serviceWorker.js","index.js"],"names":["LanguageOptions","props","isListReady","Object","keys","languagesList","length","react_default","a","createElement","onChange","value","selectedLanguage","className","key","label","popular","map","lang","urlParam","name","all","DateOption","type","id","checked","dateRange","htmlFor","DataTable","_props$item","item","language","stars","forks","author","url","bcgColor","backgroundColor","languageColor","index","style","href","target","rel","role","aria-label","DotLoader","data","isDataLoading","el","concat","description","colSpan","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getLanguages","fetch","then","response","json","setState","getData","state","linkTofetch","getSavedOptions","window","localStorage","getItem","dateRangeChange","evt","setItem","languageChange","DataTable_DataTable","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3b33f93.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function LanguageOptions(props) {\n  \n  const isListReady = Object.keys(props.languagesList).length > 0;\n\n  return ( <select onChange={props.onChange} value={props.selectedLanguage} className=\"language-option\">\n    <optgroup>\n      <option value='' key=\"All\">All</option>\n    </optgroup>\n    <optgroup label=\"Popular\">\n      {isListReady && props.languagesList.popular.map(lang => \n        <option \n          value={lang.urlParam} \n          key={lang.name}\n        >\n          {lang.name}\n        </option>)}\n    </optgroup>\n    <optgroup label=\"Other\">\n      {isListReady && props.languagesList.all.map(lang => \n        <option \n          value={lang.urlParam} \n          key={lang.name}\n        >\n          {lang.name}\n        </option>)}\n    </optgroup>\n  </select>)\n}\n\nLanguageOptions.propTypes = {\n  onChange: PropTypes.any.isRequired,\n  selectedLanguage: PropTypes.string.isRequired, \n  languagesList: PropTypes.any.isRequired,\n};\n\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function DateOption(props) {\n\n  return (\n  <div className=\"input-wrapper\">\n    <input \n      type=\"radio\" \n      name=\"dateRange\" \n      value={props.value} \n      id={props.value} \n      onChange={props.onChange}\n      checked={props.dateRange === props.value ? 'checked' : ''}\n      className=\"date-select\"\n    />\n    <label htmlFor={props.value} className=\"date-select-label\">{props.value}</label>\n  </div> )\n}\n\nDateOption.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  dateRange: PropTypes.any.isRequired, \n  value: PropTypes.string.isRequired,\n};\n\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function DataTable(props) {\n\n  const {name, language, stars, forks,  author, url, languageColor} = props.item;\n  const bcgColor = {backgroundColor: languageColor};\n\n  return (\n    <tr className=\"row\">\n      <td className=\"td-no\">{props.index + 1}</td>\n      <td className=\"td-language\">\n        <span className=\"td-language-dot\" style={bcgColor}/>\n        {language ? language : '----'}\n        </td>\n      <td className=\"td-stars\">{stars}</td>\n      <td className=\"td-forks\">{forks}</td>\n      <td className=\"td-name\">{name}</td>\n      <td className=\"td-author\">{author}</td>\n      <td className=\"td-link\">\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        <span role=\"img\" aria-label=\"link\">üîó</span>\n        </a>\n      </td>\n    </tr>\n    )\n  }\n\nDataTable.propTypes = {\n  item: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired, \n};\n\n","import React from 'react';\n\nexport default function DotLoader() {\n  \n  return (\n    <div className='dot-loader' >\n      <div className='dots' />\n      <div className='dots' />\n      <div className='dots' />\n      <div className='dots' />\n    </div>\n  );\n}","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTabelRow from './DataTableRow';\nimport DotLoader from './DotLoader';\n\n\nexport default function DataTable(props) {\n\n  const {data, isDataLoading} = props;\n\n  return (\n    <div>\n      <table className=\"data-table\">\n        <thead>\n          <tr className=\"data-table-head\">\n            <th>\n              No.\n            </th>\n            <th>\n              Language\n            </th>\n            <th className=\"td-stars\">\n              <span role=\"img\" aria-label=\"link\">üåü</span>\n            </th>\n            <th className=\"td-forks\">\n              <span role=\"img\" aria-label=\"link\">üç¥</span>\n            </th>\n            <th>\n              Repository Name\n            </th>\n            <th className=\"td-author\">\n              Author\n            </th>\n            <th>\n              Link\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"data-table-body\">\n        {!isDataLoading \n          && data.length !== 0\n          && data.map((el, index) => <DataTabelRow \n            key={`${el.name} ${el.description}`} \n            item={el} \n            index={index}\n            />)\n          }\n          {isDataLoading && <tr className=\"row\">\n              <th colSpan=\"7\"> \n               <DotLoader />\n              </th>\n          </tr>}\n            {data.length === 0\n              && !isDataLoading\n              && <tr className=\"row\">\n                <th colSpan=\"7\"> \n                  <h2>\n                      Sorry, no data available for this language or date range, try again later\n                      </h2>\n                  </th>\n            </tr>}\n        </tbody>\n      </table>\n    </div>)\n}\n\nDataTable.propTypes = {\n  data: PropTypes.array.isRequired,\n  isDataLoading: PropTypes.bool.isRequired, \n};\n\n","import React, { Component } from 'react';\nimport './App.scss';\nimport LanguageOptions from './Components/LanguageOptions';\nimport DateOption from './Components/DateOption';\nimport DataTabel from './Components/DataTable'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      data: [],\n      languagesList: {},\n      selectedLanguage: '',\n      dateRange: '',\n      isDataLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getSavedOptions();\n    this.getLanguages();\n  }\n\n  getLanguages = () => {\n    fetch('https://github-trending-api.now.sh/languages')\n    .then(response => response.json())\n    .then(response => {\n      this.setState({\n        languagesList: response,\n      });\n    });\n  }\n\n  getData = () => {\n    const language = this.state.selectedLanguage ? `&language=${this.state.selectedLanguage}` : '';\n    const dateRange = this.state.dateRange ? `&since=${this.state.dateRange}` : '';\n    const linkTofetch = `https://github-trending-api.now.sh/repositories?${language}${dateRange}`;\n\n    this.setState({\n      isDataLoading: true,\n    });\n  \n    fetch(linkTofetch)\n      .then(response => response.json())\n      .then(response => {\n        this.setState({\n          data: response,\n          isDataLoading: false,\n        });\n      });\n  }\n\n  getSavedOptions = () => {\n    this.setState({\n      dateRange: window.localStorage.getItem('dateRange') || 'daily',\n      selectedLanguage: window.localStorage.getItem('selectedLanguage') || '',\n    }, () => this.getData())\n  }\n\n  dateRangeChange = evt => {\n    this.setState({dateRange: evt.target.value}, () => this.getData());\n    window.localStorage.setItem('dateRange', evt.target.value);\n  }\n\n  languageChange = evt => {\n    this.setState({selectedLanguage: evt.target.value}, () => this.getData());\n    window.localStorage.setItem('selectedLanguage', evt.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Github trending repositories</h1>\n        <h2>Checkout which repository is trending now</h2>\n        <h3>\n          This website uses API from github repository <a href=\"https://github.com/huchenme/github-trending-api\" target=\"_blank\" rel=\"noopener noreferrer\">\n          github-trending-api\n          </a>\n        </h3>\n        <div className=\"list-options\">\n          <span className=\"list-options-label\">Trending period:</span> \n          <DateOption\n            value=\"daily\"\n            onChange={this.dateRangeChange}\n            dateRange={this.state.dateRange}\n          />\n          <DateOption\n            value=\"weekly\"\n            onChange={this.dateRangeChange}\n            dateRange={this.state.dateRange}\n          />\n          <DateOption\n            value=\"monthly\"\n            onChange={this.dateRangeChange}\n            dateRange={this.state.dateRange}\n          />\n        <span className=\"list-options-label list-options-label__second\">Language:</span>\n          <LanguageOptions  \n            onChange={this.languageChange} \n            selectedLanguage={this.state.selectedLanguage}\n            languagesList={this.state.languagesList}\n          />\n        </div>\n        <DataTabel \n          isDataLoading={this.state.isDataLoading} \n          data={this.state.data}\n        />        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}